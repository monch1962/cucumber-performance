package cucumber.perf.salad;

//      This code was generated by Berp (http://https://github.com/gasparnagy/berp/).
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import io.cucumber.core.internal.gherkin.Func;

import static java.util.Arrays.asList;

public class Parser<T> {
    public enum TokenType {
        None,
        EOF,
        Empty,
        Comment,
        TagLine,
        PlanLine,
        SimulationLine,
        SimulationPeriodLine,
        SynchronizedLine,
        TimeLine,
        GroupLine,
        DocStringSeparator,
        TableRow,
        Language,
        CountLine,
        RandomWaitLine,
        RunnersLine,
        RampUpLine,
        RampDownLine,
        Other,
        ;
    }

    public enum RuleType {
        None,
        _EOF, // #EOF
        _Empty, // #Empty
        _Comment, // #Comment
        _TagLine, // #TagLine
        _PlanLine, // #PlanLine
        _SimulationLine, // #SimulationLine
        _SimulationPeriodLine, // #SimulationPeriodLine
        _SynchronizedLine, // #SynchronizedLine
        _TimeLine, // #TimeLine
        _GroupLine, // #GroupLine
        _DocStringSeparator, // #DocStringSeparator
        _TableRow, // #TableRow
        _Language, // #Language
        _CountLine, // #CountLine
        _RandomWaitLine, // #RandomWaitLine
        _RunnersLine, // #RunnersLine
        _RampUpLine, // #RampUpLine
        _RampDownLine, // #RampDownLine
        _Other, // #Other
        SaladDocument, // SaladDocument! := Plan?
        Plan, // Plan! := Plan_Header Simulation_Definition*
        Plan_Header, // Plan_Header! := #Language? Tags? #PlanLine Description_Helper
        Simulation_Definition, // Simulation_Definition! := Tags? (Simulation | SimulationPeriod)
        Simulation, // Simulation! := #SimulationLine Description_Helper Group* Synchronized? RampUp? RampDown? RandomWait?
        SimulationPeriod, // SimulationPeriod! := #SimulationPeriodLine Description_Helper Group* Time* Synchronized? RampUp? RampDown? RandomWait?
        Time, // Time! := #TimeLine Description_Helper
        Group, // Group! := #GroupLine Group_Arg?
        Group_Arg, // Group_Arg := DataTable? DocString? Runners* Count?
        DataTable, // DataTable! := #TableRow+
        DocString, // DocString! := #DocStringSeparator #Other* #DocStringSeparator
        Runners, // Runners! := #RunnersLine
        Count, // Count! := #CountLine
        RampUp, // RampUp! := #RampUpLine
        RampDown, // RampDown! := #RampDownLine
        Tags, // Tags! := #TagLine+
        Synchronized, // Synchronized! := #SynchronizedLine
        RandomWait, // RandomWait! := #RandomWaitLine
        Description_Helper, // Description_Helper := #Empty* Description? #Comment*
        Description, // Description! := #Other+
        ;

        public static RuleType cast(TokenType tokenType) {
            return RuleType.values()[tokenType.ordinal()];
        }
    }

    private final Builder<T> builder;

    public boolean stopAtFirstError;

    class ParserContext {
        public final ITokenScanner tokenScanner;
        public final ITokenMatcher tokenMatcher;
        public final Queue<Token> tokenQueue;
        public final List<ParserException> errors;

        ParserContext(ITokenScanner tokenScanner, ITokenMatcher tokenMatcher, Queue<Token> tokenQueue, List<ParserException> errors) {
            this.tokenScanner = tokenScanner;
            this.tokenMatcher = tokenMatcher;
            this.tokenQueue = tokenQueue;
            this.errors = errors;
        }
    }

    public Parser(Builder<T> builder) {
        this.builder = builder;
    }

    public T parse(String source) {
        return parse(new StringReader(source));
    }

    public T parse(Reader source) {
        return parse(new TokenScanner(source));
    }

    public T parse(ITokenScanner tokenScanner) {
        return parse(tokenScanner, new TokenMatcher());
    }

    public T parse(String source, ITokenMatcher tokenMatcher) {
        return parse(new StringReader(source), tokenMatcher);
    }

    public T parse(Reader source, ITokenMatcher tokenMatcher) {
        return parse(new TokenScanner(source), tokenMatcher);
    }

    public T parse(ITokenScanner tokenScanner, ITokenMatcher tokenMatcher) {
        builder.reset();
        tokenMatcher.reset();

        ParserContext context = new ParserContext(
                tokenScanner,
                tokenMatcher,
                new LinkedList<Token>(),
                new ArrayList<ParserException>()
        );

        startRule(context, RuleType.SaladDocument);
        int state = 0;
        Token token;
        do {
            token = readToken(context);
            state = matchToken(state, token, context);
        } while (!token.isEOF());

        endRule(context, RuleType.SaladDocument);

        if (context.errors.size() > 0) {
            throw new ParserException.CompositeParserException(context.errors);
        }

        return builder.getResult();
    }

    private void addError(ParserContext context, ParserException error) {
        context.errors.add(error);
        if (context.errors.size() > 10)
            throw new ParserException.CompositeParserException(context.errors);
    }

    private <V> V handleAstError(ParserContext context, final Func<V> action) {
        return handleExternalError(context, action, null);
    }

    private <V> V handleExternalError(ParserContext context, Func<V> action, V defaultValue) {
        if (stopAtFirstError) {
            return action.call();
        }

        try {
            return action.call();
        } catch (ParserException.CompositeParserException compositeParserException) {
            for (ParserException error : compositeParserException.errors) {
                addError(context, error);
            }
        } catch (ParserException error) {
            addError(context, error);
        }
        return defaultValue;
    }

    private void build(final ParserContext context, final Token token) {
        handleAstError(context, new Func<Void>() {
            public Void call() {
                builder.build(token);
                return null;
            }
        });
    }

    private void startRule(final ParserContext context, final RuleType ruleType) {
        handleAstError(context, new Func<Void>() {
            public Void call() {
                builder.startRule(ruleType);
                return null;
            }
        });
    }

    private void endRule(final ParserContext context, final RuleType ruleType) {
        handleAstError(context, new Func<Void>() {
            public Void call() {
                builder.endRule(ruleType);
                return null;
            }
        });
    }

    private Token readToken(ParserContext context) {
        return context.tokenQueue.size() > 0 ? context.tokenQueue.remove() : context.tokenScanner.read();
    }


    private boolean match_EOF(final ParserContext context, final Token token) {
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_EOF(token);
            }
        }, false);
    }

    private boolean match_Empty(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_Empty(token);
            }
        }, false);
    }

    private boolean match_Comment(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_Comment(token);
            }
        }, false);
    }

    private boolean match_TagLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_TagLine(token);
            }
        }, false);
    }

    private boolean match_PlanLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_PlanLine(token);
            }
        }, false);
    }

    private boolean match_SimulationLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_SimulationLine(token);
            }
        }, false);
    }

    private boolean match_SimulationPeriodLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_SimulationPeriodLine(token);
            }
        }, false);
    }

    private boolean match_SynchronizedLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_SynchronizedLine(token);
            }
        }, false);
    }

    private boolean match_TimeLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_TimeLine(token);
            }
        }, false);
    }

    private boolean match_GroupLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_GroupLine(token);
            }
        }, false);
    }

    private boolean match_DocStringSeparator(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_DocStringSeparator(token);
            }
        }, false);
    }

    private boolean match_TableRow(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_TableRow(token);
            }
        }, false);
    }

    private boolean match_Language(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_Language(token);
            }
        }, false);
    }

    private boolean match_CountLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_CountLine(token);
            }
        }, false);
    }

    private boolean match_RandomWaitLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_RandomWaitLine(token);
            }
        }, false);
    }

    private boolean match_RunnersLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_RunnersLine(token);
            }
        }, false);
    }

    private boolean match_RampUpLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_RampUpLine(token);
            }
        }, false);
    }

    private boolean match_RampDownLine(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_RampDownLine(token);
            }
        }, false);
    }

    private boolean match_Other(final ParserContext context, final Token token) {
        if (token.isEOF()) return false;
        return handleExternalError(context, new Func<Boolean>() {
            public Boolean call() {
                return context.tokenMatcher.match_Other(token);
            }
        }, false);
    }

    private int matchToken(int state, Token token, ParserContext context) {
        int newState;
        switch(state) {
            case 0:
                newState = matchTokenAt_0(token, context);
                break;
            case 1:
                newState = matchTokenAt_1(token, context);
                break;
            case 2:
                newState = matchTokenAt_2(token, context);
                break;
            case 3:
                newState = matchTokenAt_3(token, context);
                break;
            case 4:
                newState = matchTokenAt_4(token, context);
                break;
            case 5:
                newState = matchTokenAt_5(token, context);
                break;
            case 6:
                newState = matchTokenAt_6(token, context);
                break;
            case 7:
                newState = matchTokenAt_7(token, context);
                break;
            case 8:
                newState = matchTokenAt_8(token, context);
                break;
            case 9:
                newState = matchTokenAt_9(token, context);
                break;
            case 10:
                newState = matchTokenAt_10(token, context);
                break;
            case 11:
                newState = matchTokenAt_11(token, context);
                break;
            case 12:
                newState = matchTokenAt_12(token, context);
                break;
            case 13:
                newState = matchTokenAt_13(token, context);
                break;
            case 14:
                newState = matchTokenAt_14(token, context);
                break;
            case 15:
                newState = matchTokenAt_15(token, context);
                break;
            case 16:
                newState = matchTokenAt_16(token, context);
                break;
            case 17:
                newState = matchTokenAt_17(token, context);
                break;
            case 18:
                newState = matchTokenAt_18(token, context);
                break;
            case 19:
                newState = matchTokenAt_19(token, context);
                break;
            case 20:
                newState = matchTokenAt_20(token, context);
                break;
            case 21:
                newState = matchTokenAt_21(token, context);
                break;
            case 22:
                newState = matchTokenAt_22(token, context);
                break;
            case 23:
                newState = matchTokenAt_23(token, context);
                break;
            case 24:
                newState = matchTokenAt_24(token, context);
                break;
            case 25:
                newState = matchTokenAt_25(token, context);
                break;
            case 26:
                newState = matchTokenAt_26(token, context);
                break;
            case 27:
                newState = matchTokenAt_27(token, context);
                break;
            case 28:
                newState = matchTokenAt_28(token, context);
                break;
            case 29:
                newState = matchTokenAt_29(token, context);
                break;
            case 30:
                newState = matchTokenAt_30(token, context);
                break;
            case 31:
                newState = matchTokenAt_31(token, context);
                break;
            case 32:
                newState = matchTokenAt_32(token, context);
                break;
            case 33:
                newState = matchTokenAt_33(token, context);
                break;
            case 34:
                newState = matchTokenAt_34(token, context);
                break;
            case 35:
                newState = matchTokenAt_35(token, context);
                break;
            default:
                throw new IllegalStateException("Unknown state: " + state);
        }
        return newState;
    }


    // Start
    private int matchTokenAt_0(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                build(context, token);
            return 36;
        }
        if (match_Language(context, token))
        {
                startRule(context, RuleType.Plan);
                startRule(context, RuleType.Plan_Header);
                build(context, token);
            return 1;
        }
        if (match_TagLine(context, token))
        {
                startRule(context, RuleType.Plan);
                startRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 2;
        }
        if (match_PlanLine(context, token))
        {
                startRule(context, RuleType.Plan);
                startRule(context, RuleType.Plan_Header);
                build(context, token);
            return 3;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 0;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 0;
        }
        
        final String stateComment = "State: 0 - Start";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Language", "#TagLine", "#PlanLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 0;

    }


    // SaladDocument:0>Plan:0>Plan_Header:0>#Language:0
    private int matchTokenAt_1(Token token, ParserContext context) {
        if (match_TagLine(context, token))
        {
                startRule(context, RuleType.Tags);
                build(context, token);
            return 2;
        }
        if (match_PlanLine(context, token))
        {
                build(context, token);
            return 3;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 1;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 1;
        }
        
        final String stateComment = "State: 1 - SaladDocument:0>Plan:0>Plan_Header:0>#Language:0";
        token.detach();
        List<String> expectedTokens = asList("#TagLine", "#PlanLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 1;

    }


    // SaladDocument:0>Plan:0>Plan_Header:1>Tags:0>#TagLine:0
    private int matchTokenAt_2(Token token, ParserContext context) {
        if (match_TagLine(context, token))
        {
                build(context, token);
            return 2;
        }
        if (match_PlanLine(context, token))
        {
                endRule(context, RuleType.Tags);
                build(context, token);
            return 3;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 2;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 2;
        }
        
        final String stateComment = "State: 2 - SaladDocument:0>Plan:0>Plan_Header:1>Tags:0>#TagLine:0";
        token.detach();
        List<String> expectedTokens = asList("#TagLine", "#PlanLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 2;

    }


    // SaladDocument:0>Plan:0>Plan_Header:2>#PlanLine:0
    private int matchTokenAt_3(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 3;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 5;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                startRule(context, RuleType.Description);
                build(context, token);
            return 4;
        }
        
        final String stateComment = "State: 3 - SaladDocument:0>Plan:0>Plan_Header:2>#PlanLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Empty", "#Comment", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 3;

    }


    // SaladDocument:0>Plan:0>Plan_Header:3>Description_Helper:1>Description:0>#Other:0
    private int matchTokenAt_4(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Plan_Header);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                endRule(context, RuleType.Description);
                build(context, token);
            return 5;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 4;
        }
        
        final String stateComment = "State: 4 - SaladDocument:0>Plan:0>Plan_Header:3>Description_Helper:1>Description:0>#Other:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 4;

    }


    // SaladDocument:0>Plan:0>Plan_Header:3>Description_Helper:2>#Comment:0
    private int matchTokenAt_5(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 5;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Plan_Header);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 5;
        }
        
        final String stateComment = "State: 5 - SaladDocument:0>Plan:0>Plan_Header:3>Description_Helper:2>#Comment:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 5;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:0>Tags:0>#TagLine:0
    private int matchTokenAt_6(Token token, ParserContext context) {
        if (match_TagLine(context, token))
        {
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Tags);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Tags);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 6;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 6;
        }
        
        final String stateComment = "State: 6 - SaladDocument:0>Plan:1>Simulation_Definition:0>Tags:0>#TagLine:0";
        token.detach();
        List<String> expectedTokens = asList("#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 6;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:0>#SimulationLine:0
    private int matchTokenAt_7(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 7;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 9;
        }
        if (match_GroupLine(context, token))
        {
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                startRule(context, RuleType.Description);
                build(context, token);
            return 8;
        }
        
        final String stateComment = "State: 7 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:0>#SimulationLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Empty", "#Comment", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 7;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:1>Description_Helper:1>Description:0>#Other:0
    private int matchTokenAt_8(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                endRule(context, RuleType.Description);
                build(context, token);
            return 9;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 8;
        }
        
        final String stateComment = "State: 8 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:1>Description_Helper:1>Description:0>#Other:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 8;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:1>Description_Helper:2>#Comment:0
    private int matchTokenAt_9(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 9;
        }
        if (match_GroupLine(context, token))
        {
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 9;
        }
        
        final String stateComment = "State: 9 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:1>Description_Helper:2>#Comment:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 9;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:0>#GroupLine:0
    private int matchTokenAt_10(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TableRow(context, token))
        {
                startRule(context, RuleType.DataTable);
                build(context, token);
            return 11;
        }
        if (match_DocStringSeparator(context, token))
        {
                startRule(context, RuleType.DocString);
                build(context, token);
            return 12;
        }
        if (match_RunnersLine(context, token))
        {
                startRule(context, RuleType.Runners);
                build(context, token);
            return 14;
        }
        if (match_CountLine(context, token))
        {
                startRule(context, RuleType.Count);
                build(context, token);
            return 15;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 10;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 10;
        }
        
        final String stateComment = "State: 10 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:0>#GroupLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TableRow", "#DocStringSeparator", "#RunnersLine", "#CountLine", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 10;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:0>DataTable:0>#TableRow:0
    private int matchTokenAt_11(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TableRow(context, token))
        {
                build(context, token);
            return 11;
        }
        if (match_DocStringSeparator(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.DocString);
                build(context, token);
            return 12;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 14;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.Count);
                build(context, token);
            return 15;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 11;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 11;
        }
        
        final String stateComment = "State: 11 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:0>DataTable:0>#TableRow:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TableRow", "#DocStringSeparator", "#RunnersLine", "#CountLine", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 11;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:1>DocString:0>#DocStringSeparator:0
    private int matchTokenAt_12(Token token, ParserContext context) {
        if (match_DocStringSeparator(context, token))
        {
                build(context, token);
            return 13;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 12;
        }
        
        final String stateComment = "State: 12 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:1>DocString:0>#DocStringSeparator:0";
        token.detach();
        List<String> expectedTokens = asList("#DocStringSeparator", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 12;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:1>DocString:2>#DocStringSeparator:0
    private int matchTokenAt_13(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.DocString);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 14;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.DocString);
                startRule(context, RuleType.Count);
                build(context, token);
            return 15;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 13;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 13;
        }
        
        final String stateComment = "State: 13 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:1>DocString:2>#DocStringSeparator:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RunnersLine", "#CountLine", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 13;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:2>Runners:0>#RunnersLine:0
    private int matchTokenAt_14(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.Runners);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 14;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.Runners);
                startRule(context, RuleType.Count);
                build(context, token);
            return 15;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 14;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 14;
        }
        
        final String stateComment = "State: 14 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:2>Runners:0>#RunnersLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RunnersLine", "#CountLine", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 14;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:3>Count:0>#CountLine:0
    private int matchTokenAt_15(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 10;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 16;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 15;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 15;
        }
        
        final String stateComment = "State: 15 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:2>Group:1>Group_Arg:3>Count:0>#CountLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#GroupLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 15;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:3>Synchronized:0>#SynchronizedLine:0
    private int matchTokenAt_16(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 17;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 16;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 16;
        }
        
        final String stateComment = "State: 16 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:3>Synchronized:0>#SynchronizedLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 16;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:4>RampUp:0>#RampUpLine:0
    private int matchTokenAt_17(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 18;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 17;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 17;
        }
        
        final String stateComment = "State: 17 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:4>RampUp:0>#RampUpLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 17;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:5>RampDown:0>#RampDownLine:0
    private int matchTokenAt_18(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 19;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 18;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 18;
        }
        
        final String stateComment = "State: 18 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:5>RampDown:0>#RampDownLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 18;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:6>RandomWait:0>#RandomWaitLine:0
    private int matchTokenAt_19(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.Simulation);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 19;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 19;
        }
        
        final String stateComment = "State: 19 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:0>Simulation:6>RandomWait:0>#RandomWaitLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 19;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:0>#SimulationPeriodLine:0
    private int matchTokenAt_20(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 22;
        }
        if (match_GroupLine(context, token))
        {
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                startRule(context, RuleType.Description);
                build(context, token);
            return 21;
        }
        
        final String stateComment = "State: 20 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:0>#SimulationPeriodLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Empty", "#Comment", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 20;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:1>Description_Helper:1>Description:0>#Other:0
    private int matchTokenAt_21(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                endRule(context, RuleType.Description);
                build(context, token);
            return 22;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Description);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 21;
        }
        
        final String stateComment = "State: 21 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:1>Description_Helper:1>Description:0>#Other:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 21;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:1>Description_Helper:2>#Comment:0
    private int matchTokenAt_22(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 22;
        }
        if (match_GroupLine(context, token))
        {
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 22;
        }
        
        final String stateComment = "State: 22 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:1>Description_Helper:2>#Comment:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 22;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:0>#GroupLine:0
    private int matchTokenAt_23(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TableRow(context, token))
        {
                startRule(context, RuleType.DataTable);
                build(context, token);
            return 24;
        }
        if (match_DocStringSeparator(context, token))
        {
                startRule(context, RuleType.DocString);
                build(context, token);
            return 25;
        }
        if (match_RunnersLine(context, token))
        {
                startRule(context, RuleType.Runners);
                build(context, token);
            return 27;
        }
        if (match_CountLine(context, token))
        {
                startRule(context, RuleType.Count);
                build(context, token);
            return 28;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 23;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 23;
        }
        
        final String stateComment = "State: 23 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:0>#GroupLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TableRow", "#DocStringSeparator", "#RunnersLine", "#CountLine", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 23;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:0>DataTable:0>#TableRow:0
    private int matchTokenAt_24(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TableRow(context, token))
        {
                build(context, token);
            return 24;
        }
        if (match_DocStringSeparator(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.DocString);
                build(context, token);
            return 25;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 27;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                startRule(context, RuleType.Count);
                build(context, token);
            return 28;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.DataTable);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 24;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 24;
        }
        
        final String stateComment = "State: 24 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:0>DataTable:0>#TableRow:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TableRow", "#DocStringSeparator", "#RunnersLine", "#CountLine", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 24;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:1>DocString:0>#DocStringSeparator:0
    private int matchTokenAt_25(Token token, ParserContext context) {
        if (match_DocStringSeparator(context, token))
        {
                build(context, token);
            return 26;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 25;
        }
        
        final String stateComment = "State: 25 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:1>DocString:0>#DocStringSeparator:0";
        token.detach();
        List<String> expectedTokens = asList("#DocStringSeparator", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 25;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:1>DocString:2>#DocStringSeparator:0
    private int matchTokenAt_26(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.DocString);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 27;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.DocString);
                startRule(context, RuleType.Count);
                build(context, token);
            return 28;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.DocString);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 26;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 26;
        }
        
        final String stateComment = "State: 26 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:1>DocString:2>#DocStringSeparator:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RunnersLine", "#CountLine", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 26;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:2>Runners:0>#RunnersLine:0
    private int matchTokenAt_27(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RunnersLine(context, token))
        {
                endRule(context, RuleType.Runners);
                startRule(context, RuleType.Runners);
                build(context, token);
            return 27;
        }
        if (match_CountLine(context, token))
        {
                endRule(context, RuleType.Runners);
                startRule(context, RuleType.Count);
                build(context, token);
            return 28;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Runners);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 27;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 27;
        }
        
        final String stateComment = "State: 27 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:2>Runners:0>#RunnersLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RunnersLine", "#CountLine", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 27;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:3>Count:0>#CountLine:0
    private int matchTokenAt_28(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_GroupLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Group);
                build(context, token);
            return 23;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Count);
                endRule(context, RuleType.Group);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 28;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 28;
        }
        
        final String stateComment = "State: 28 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:2>Group:1>Group_Arg:3>Count:0>#CountLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#GroupLine", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 28;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:0>#TimeLine:0
    private int matchTokenAt_29(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 29;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 31;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                startRule(context, RuleType.Description);
                build(context, token);
            return 30;
        }
        
        final String stateComment = "State: 29 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:0>#TimeLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Empty", "#Comment", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 29;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:1>Description_Helper:1>Description:0>#Other:0
    private int matchTokenAt_30(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                endRule(context, RuleType.Description);
                build(context, token);
            return 31;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Description);
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Other(context, token))
        {
                build(context, token);
            return 30;
        }
        
        final String stateComment = "State: 30 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:1>Description_Helper:1>Description:0>#Other:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Other");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 30;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:1>Description_Helper:2>#Comment:0
    private int matchTokenAt_31(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 31;
        }
        if (match_TimeLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Time);
                build(context, token);
            return 29;
        }
        if (match_SynchronizedLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.Synchronized);
                build(context, token);
            return 32;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Time);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Time);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 31;
        }
        
        final String stateComment = "State: 31 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:3>Time:1>Description_Helper:2>#Comment:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#Comment", "#TimeLine", "#SynchronizedLine", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 31;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:4>Synchronized:0>#SynchronizedLine:0
    private int matchTokenAt_32(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RampUpLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RampUp);
                build(context, token);
            return 33;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.Synchronized);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 32;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 32;
        }
        
        final String stateComment = "State: 32 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:4>Synchronized:0>#SynchronizedLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RampUpLine", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 32;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:5>RampUp:0>#RampUpLine:0
    private int matchTokenAt_33(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RampDownLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                startRule(context, RuleType.RampDown);
                build(context, token);
            return 34;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RampUp);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 33;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 33;
        }
        
        final String stateComment = "State: 33 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:5>RampUp:0>#RampUpLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RampDownLine", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 33;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:6>RampDown:0>#RampDownLine:0
    private int matchTokenAt_34(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_RandomWaitLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                startRule(context, RuleType.RandomWait);
                build(context, token);
            return 35;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RampDown);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 34;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 34;
        }
        
        final String stateComment = "State: 34 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:6>RampDown:0>#RampDownLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#RandomWaitLine", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 34;

    }


    // SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:7>RandomWait:0>#RandomWaitLine:0
    private int matchTokenAt_35(Token token, ParserContext context) {
        if (match_EOF(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                endRule(context, RuleType.Plan);
                build(context, token);
            return 36;
        }
        if (match_TagLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Tags);
                build(context, token);
            return 6;
        }
        if (match_SimulationLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation);
                build(context, token);
            return 7;
        }
        if (match_SimulationPeriodLine(context, token))
        {
                endRule(context, RuleType.RandomWait);
                endRule(context, RuleType.SimulationPeriod);
                endRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.Simulation_Definition);
                startRule(context, RuleType.SimulationPeriod);
                build(context, token);
            return 20;
        }
        if (match_Comment(context, token))
        {
                build(context, token);
            return 35;
        }
        if (match_Empty(context, token))
        {
                build(context, token);
            return 35;
        }
        
        final String stateComment = "State: 35 - SaladDocument:0>Plan:1>Simulation_Definition:1>__alt0:1>SimulationPeriod:7>RandomWait:0>#RandomWaitLine:0";
        token.detach();
        List<String> expectedTokens = asList("#EOF", "#TagLine", "#SimulationLine", "#SimulationPeriodLine", "#Comment", "#Empty");
        ParserException error = token.isEOF()
                ? new ParserException.UnexpectedEOFException(token, expectedTokens, stateComment)
                : new ParserException.UnexpectedTokenException(token, expectedTokens, stateComment);
        if (stopAtFirstError)
            throw error;

        addError(context, error);
        return 35;

    }



    public interface Builder<T> {
        void build(Token token);
        void startRule(RuleType ruleType);
        void endRule(RuleType ruleType);
        T getResult();
        void reset();
    }

    public interface ITokenScanner {
        Token read();
    }

    public interface ITokenMatcher {
        boolean match_EOF(Token token);
        boolean match_Empty(Token token);
        boolean match_Comment(Token token);
        boolean match_TagLine(Token token);
        boolean match_PlanLine(Token token);
        boolean match_SimulationLine(Token token);
        boolean match_SimulationPeriodLine(Token token);
        boolean match_SynchronizedLine(Token token);
        boolean match_TimeLine(Token token);
        boolean match_GroupLine(Token token);
        boolean match_DocStringSeparator(Token token);
        boolean match_TableRow(Token token);
        boolean match_Language(Token token);
        boolean match_CountLine(Token token);
        boolean match_RandomWaitLine(Token token);
        boolean match_RunnersLine(Token token);
        boolean match_RampUpLine(Token token);
        boolean match_RampDownLine(Token token);
        boolean match_Other(Token token);
        void reset();
    }
}